{"version":3,"sources":["serviceWorker.js","TestMap.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","TestMap","useState","type","features","properties","geometry","coordinates","data","setData","latitude","longitude","zoom","viewport","setViewport","position","style","width","height","mapStyle","accessToken","onViewportChange","onChange","addJSON","App","props","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCmCSC,G,YA9CC,WACZ,IADiB,EAEOC,mBAAS,CAC7BC,KAAM,oBACNC,SAAU,CACR,CACED,KAAM,UACNE,WAAY,GACZC,SAAU,CACRC,YAAa,EAAE,mBAAoB,oBACnCJ,KAAM,aAVC,mBAEVK,EAFU,KAEJC,EAFI,OAgBeP,mBAAS,CACrCQ,SAAU,MACVC,WAAY,OACZC,KAAM,KAnBO,mBAgBVC,EAhBU,KAgBAC,EAhBA,OAqBeZ,mBAAS,YArBxB,mBAqBVa,EArBU,UA4BjB,OACI,oCACA,kBAAC,IAAD,eACEC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAChCC,SAAS,qDACTC,YAhCsB,6FAiCtBC,iBAAkBP,GACfD,GAEH,kBAAC,IAAD,CAAML,KAAMA,EAAMc,SAAU,SAACd,GAAD,OAAUC,EAAQD,IAAOO,SAAUA,UAG/DQ,KCpCKC,MARf,SAAaC,GACT,OACI,6BACI,kBAAC,EAAD,QCAZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c290785.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\r\nimport MapGL from '@urbica/react-map-gl';\r\nimport Draw from '@urbica/react-map-gl-draw';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\r\n//import dataFeatures from './data/dataFeatures.json';\r\n\r\nconst TestMap = () =>{\r\n    const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiYWRhbWxhc3QiLCJhIjoiY2tmbG9uczh3MDNsbjJxbGhvaXd5cWVzZiJ9.5-2M4SgMPN-TIN3rtLTuNQ';\r\n    const [data, setData] = useState({\r\n        type: 'FeatureCollection',\r\n        features: [\r\n          {\r\n            type: 'Feature',\r\n            properties: {},\r\n            geometry: {\r\n              coordinates: [-122.41411987304815, 37.792209769935084],\r\n              type: 'Point'\r\n            }\r\n          }\r\n        ]\r\n      });\r\n    \r\n    const [viewport, setViewport] = useState({\r\n        latitude: 37.78,\r\n        longitude: -122.41,\r\n        zoom: 13\r\n    });\r\n    const [position, setPosition] = useState('top-left');\r\n\r\n    const addJSON = () =>{\r\n      //dataFeatures = JSON.parse(data);\r\n      //console.log(dataFeatures);\r\n    }\r\n      \r\n    return (\r\n        <>\r\n        <MapGL\r\n          style={{ width: '100%', height: '100vh' }}\r\n          mapStyle='mapbox://styles/adamlast/ckflpezvh3ukj19s2uoyln2os'\r\n          accessToken={MAPBOX_ACCESS_TOKEN}\r\n          onViewportChange={setViewport}\r\n         {...viewport}\r\n        >\r\n          <Draw data={data} onChange={(data) => setData(data)} position={position} />\r\n        </MapGL>\r\n        {\r\n          addJSON()\r\n        }\r\n      </>\r\n    )\r\n}\r\n\r\nexport default TestMap","import React from 'react';\r\nimport TestMap from './TestMap';\r\n\r\nfunction App(props) {\r\n    return (\r\n        <div>\r\n            <TestMap/>\r\n        </div>\r\n    );\r\n};\r\n  \r\nexport default App;\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}